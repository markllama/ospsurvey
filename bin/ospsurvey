#!/usr/bin/env python
from __future__ import print_function
"""
Report status of OSP servers and services
"""
import argparse
import logging
logging.basicConfig(level=logging.INFO)

#
#
#

import datetime
import json
import platform

class Report():
  """
  Generate report metadata.
  """
  def __init__(self, topic):
    host = platform.node()
    self.start = datetime.datetime.now()

    self.metadata = {
      'topic': topic,
      'host': host,
      'start': str(self.start),
      'duration': None
    }

    self.data = None

  def __str__(self):
    """
    Convert the report to text
    """
    return json.dumps({'metadata': self.metadata, 'data': self.data})
    
  def end(self):
    duration = datetime.datetime.now() - self.start
    self.metadata['duration'] = duration.seconds

#
#
#
def report_all(args):
  md = Report('all')
  md.end()
  print(md)
  

import ospsurvey.probes.sm

def report_sm(args):
  md = Report('subscription-manager')

  sm = ospsurvey.probes.sm.SubscriptionManager()
  if sm.subscribed():
    md.data = {'sm': sm.status()}
    md.data['sm']['config'] = sm.config()
    md.data['sm']['consumed'] = sm.consumed()
    md.data['sm']['repos'] = sm.repos()

    #ospsurvey.probes.sm.get_sm_info()
  else:
    md.data = {}
  md.end()
  print(md)

def report_yum(args):
  md = Report('yum repositories')
  md.end()
  print(md)

def report_cve(args):
  md = Report('CVE')
  md.end()
  print(md)

def report_rpm(args):
  md = Report('updates')
  md.end()
  print(md)


if __name__ == "__main__":

  parser = argparse.ArgumentParser()
  #parser.set_defaults(func=report_all)
  
  func_parsers = parser.add_subparsers()

  all_parser = func_parsers.add_parser('all')
  all_parser.set_defaults(func=report_all)
  
  sm_parser = func_parsers.add_parser('sm')
  sm_parser.set_defaults(func=report_sm)
  
  yum_parser = func_parsers.add_parser('yum')
  yum_parser.set_defaults(func=report_yum)
  
  cve_parser = func_parsers.add_parser('cve')
  cve_parser.set_defaults(func=report_cve)

  rpm_parser = func_parsers.add_parser('rpm')
  rpm_parser.set_defaults(func=report_rpm)
  
  args = parser.parse_args()

  args.func(args)
