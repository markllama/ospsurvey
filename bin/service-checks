#!/usr/bin/env python
"""
Get the list of undercloud services.
Ensure that they are running and responding on all endpoints.
Ensure that system services are running on all controllers
"""
from __future__ import print_function

import argparse
import json
import logging
import re
import os
import yaml

import ospsurvey.version
import ospsurvey.probes.endpoints
import ospsurvey.probes.services

def parse_cli_arguments():

  parser = argparse.ArgumentParser()
  parser.add_argument("-d", "--debug", action="store_true", default=False,
                      help="Print additional information for status and diagnosis")

  parser.add_argument("-P", "--no-profile", dest="load_profile", action="store_false", default=True,
                      help="disable loading a profile for comparison")
  parser.add_argument("-p", "--profile-dir", default=os.path.abspath(os.curdir),
                      help="Where to find OSP version profiles")
  
  env_group = parser.add_mutually_exclusive_group()
  env_group.add_argument('-V', '--require-env', dest="require_env", action='store_true', default=True)
  env_group.add_argument('--no-require-env', dest="require_env", action='store_false')
  return parser.parse_args()

def service_endpoints(services, endpoints):
  """
  Associate and return a list of services and the endpoints that provide access
  to them.
  Should also note any service without an endpoint or (is this possible?)
  endpoint without a service.
  """
  # create an empty array for each service
  endpoint_map = {s.Name:[] for s in services}
  # and put each endpoint into one
  for e in endpoints:
    endpoint_map[e.Service_Name].append(e)

  return endpoint_map

def check_credentials():
  """
  Check that the OSP credentials have been sourced into the envinronment
  OS_AUTH_URL
  OS_USERNAME
  OS_PASSWORD

  There are others, but use these as canaries
  """

  required_variables = ('OS_AUTH_URL', 'OS_USERNAME', 'OS_PASSWORD')

  logging.debug("checking openstack auth environment variables")
  ok = True
  for var in required_variables:
    if not var in os.environ:
      logging.warning("missing required environment variable: {}".format(var))
      ok = False
    else:
      logging.debug("OpenStack Auth Var: {} = {}".format(var, os.environ[var]))

  return ok

def profile_filename(profile_dir, version_string):
  """
  Find the file with the profile yaml data for comparison to the actual deployed
  """

  version_re = r'^(\d+)\.(\d+)\.(\d+)$'
  version_match = re.match(version_re, version_string)
  (major, minor, build) = version_match.groups() if version_match is not None else (None, None, None)

  return os.path.join(profile_dir, "profiles/osp-{}.yaml".format(major)) if major else None


if __name__ == "__main__":

  opts = parse_cli_arguments()
  if opts.debug:
    logging.basicConfig(level=logging.DEBUG)

  version = ospsurvey.version.version()
  logging.debug("OSP version found: {}".format(version))

  profile_path = profile_filename(opts.profile_dir, version)
  logging.info("searching for profile at {}".format(profile_path))

  
  if os.path.exists(profile_path):
    logging.info("loading profile from {}".format(profile_path))
    profile = yaml.load(open(profile_path))
  else:
    logging.info("profile not found at {}: skipping profile load".format(profile_path))
    profile = None
  logging.debug("profile: {}".format(json.dumps(profile)))

  if opts.require_env and check_credentials() is False:
    logging.fatal("Missing required environment variables: aborting survey")
    sys.exit(1)

  services = ospsurvey.probes.services.list_services()
  endpoints = ospsurvey.probes.endpoints.list_endpoints()

  # map all endpoints to a service
  se = service_endpoints(services, endpoints)

  logging.debug(se)

  # -----------------------------------------------------------------------
  # Checks
  # -----------------------------------------------------------------------
  # * all services present
  # * note extra services
  # * note any service not enabled
  # * check endpoints for each service
  # ** ping the admin interface
  # ** query the admin interface URL
  # ** ping and query all interfaces accessable from the director

  # compare number of services from profile to actual

  # compare list of services from profile to actual:
  #   missing
  #   extra
  if profile:
    service_names = set([s.Name for s in services])
    expected_service_names = set(profile['profile']['undercloud']['services'])

    service_count_expected =  len(expected_service_names)
    service_count_actual = len(service_names)
    print("service count - actual: {}, expected: {}".format(
      service_count_actual,
      service_count_expected))

    missing_services = expected_service_names.difference(service_names)
    extra_services = service_names.difference(expected_service_names)

    print("Extra Services: {}\nMissing Services: {}".format(
      extra_services, missing_services))

    # check that all services are up
    disabled_services = [s.Name for s in services if not s.Enabled]
    print("Disabled Services: {}".format disabled_services)
