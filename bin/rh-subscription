#!/usr/bin/env python
from __future__ import print_function
"""
Query and compile subscription manager information:
  subscription status
  configuration
  consumed subscriptions
  enabled repos

TODO:
  If status returns non-zero, check for rhn config:
  /etc/sysconfig/rhn/*
"""

import json
import re
import subprocess
import sys
#
# There are a couple of versions of ConfigParser. The older ones want to read
# only from a file.  So this snippet adapts for both possibilities
#
try:
  import configparser
except ImportError as e:
  print("failed to import configparser")
  sys.exit(1)

# Extend the ConfigParser to create a dict
# from https://stackoverflow.com/questions/3220670/read-all-the-contents-in-ini-file-into-dictionary-with-python

class SmConfigParser(configparser.ConfigParser):

  def as_dict(self):
    d = dict(self._sections)
    for k in d:
      d[k] = dict(self._defaults, **d[k])
      d[k].pop('__name__', None)
    return d

def get_sm_config():
  """
  Read the subscription-manager configuration and return it as a dict
  """
  sm_config_string_orig = subprocess.check_output("sudo subscription-manager config".split())

  # remove lines afer the one containing "default value in use"
  default_line = '[] - Default value in use'
  sm_config_all_lines = sm_config_string_orig.split('\n')
  sm_config_lines = sm_config_all_lines[:sm_config_all_lines.index(default_line)]
  sm_config_string = '\n'.join(sm_config_lines)

  sm_config_string_default = re.sub(r'= \[\]', '= default', sm_config_string)
  sm_config_string_unbracket = re.sub(r'= \[([^]]+)\]', r'= \1', sm_config_string_default)

  sm_config = SmConfigParser()
  sm_config.read_string(unicode(sm_config_string_unbracket))

  return sm_config.as_dict()

def get_sm_status():
  """
  Gather subscription manager and yum status
  """

  # define the value search patterns
  status_re = re.compile("Overall Status: (.*)")
  purpose_re = re.compile("System Purpose Status: (.*)")

  # get the actual status
  try:
    sm_status_string = \
      subprocess.check_output("sudo subscription-manager status".split())
  except subprocess.CalledProcessError as e:
    return {'status': 'Unsubscribed'}
  
  # extract the status string
  status_match = status_re.search(sm_status_string, re.MULTILINE)
  status = status_match.groups()[0]

  # extract the purpose string
  purpose_match = purpose_re.search(sm_status_string, re.MULTILINE)
  purpose = purpose_match.groups()[0]

  # report the results as a structure.
  return {'status': status, 'purpose': purpose}

def parse_sm_record(lines):
  """
  Create a dict record from a fragement of a subscription-manager output
  """
  # lines are key/value, with multiple values signalled by white space at the
  # beginning of the line.
  # blank lines signal the end of a structure
  kv_re = re.compile('^(([^:]+):)?\s+(.*)$')

  record = {}
  # The subscription name will be the key for each subscription record
  title = re.sub('^.*:\s+', '', lines[0]).strip()

  for l in lines[1:]:
    # check all lines for "((key):)? (value)"
    #new_value = kv_re.match('^(([^:]+):)?\s+(.*)$', l)
    new_value = kv_re.match(l)
    if new_value:
      a,k,v = new_value.groups()
      
      # If a key is present, this is a new field of the record
      if k:
        record[k] = v
        hold_k = k

      # If not, the field is a list of values.  Append to it
      else:
        if type(record[hold_k]) is list:
          record[hold_k].append(v)
        else:
          record[hold_k] = [record[hold_k], v]

  return title, record


def get_sm_consumed():
  """
  Report the consumed subscriptions
  """
  # get the actual status
  sm_consumed_string = \
    subprocess.check_output("sudo subscription-manager list --consumed".split())

  # read the header and get the title

  sm_consumed_lines = sm_consumed_string.split('\n')

  # 1st and 3rd lines should match "^\+-*\*$"
  # Second line is title, with white space stripped

  # lines are key/value, with multiple values signalled by white space at the
  # beginning of the line.
  # blank lines signal the end of a structure
  kv_re = re.compile("^([^:]+):\s+(.*)$")

  # Initialize the consumed subscriptions set
  subscriptions = {}

  # The first line of each subscription record will have this string
  marker = "Subscription Name"
  # Get the index of each line with the marker in it
  # Those are the beginning lines of subscription records
  starts = [i for i, line in enumerate(sm_consumed_lines) if line.startswith(marker + ':')]

  # Collect all of the subscription records
  for start in starts:

    # Clip out just the lines for this record from the output
    end = sm_consumed_lines[start:].index("")
    sub_lines = sm_consumed_lines[start:start + end]

    title, record = parse_sm_record(sub_lines)
    subscriptions[title] = record

  return subscriptions


def get_sm_repos():
  """
  Get a list of repositories enabled in subscription manager
  """
  sm_repos_string = \
    subprocess.check_output("sudo subscription-manager repos --list-enabled".split())

  sm_repos_lines = sm_repos_string.split('\n')

  repos = {}

  # The first line of each subscription record will have this string
  marker = "Repo ID"
  # Get the index of each line with the marker in it
  # Those are the beginning lines of subscription records
  starts = [i for i, line in enumerate(sm_repos_lines) if line.startswith(marker + ':')]

  # Collect all of the subscription records
  for start in starts:
    # Clip out just the lines for this record from the output
    end = sm_repos_lines[start:].index("")
    repo_lines = sm_repos_lines[start:start + end]

    title, record = parse_sm_record(repo_lines)
    repos[title] = record

  return repos
    
if __name__ == "__main__":

  record = {}
  sm_config = get_sm_config()
  sm_status = get_sm_status()
  record['status'] = sm_status
  
  if sm_status['status'] != 'Unsubscribed':
    sm_consumed = get_sm_consumed()
    sm_repos = get_sm_repos()

    record['consumed'] = sm_consumed
    record['repos'] = sm_repos
    
  print(json.dumps(record))
