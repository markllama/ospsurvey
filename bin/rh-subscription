#!/usr/bin/env python
from __future__ import print_function
"""
Query and compile subscription manager information:
  subscription status
  configuration
  consumed subscriptions
  enabled repos

TODO:
  If status returns non-zero, check for rhn config:
  /etc/sysconfig/rhn/*
"""

import json
import sys

import ospsurvey.probes.software

#
# There are a couple of versions of ConfigParser. The older ones want to read
# only from a file.  So this snippet adapts for both possibilities
#
#try:
#  import configparser
#except ImportError as e:
#  print("failed to import configparser")
#  sys.exit(1)

import ConfigParser as configparser

# Extend the ConfigParser to create a dict
# from https://stackoverflow.com/questions/3220670/read-all-the-contents-in-ini-file-into-dictionary-with-python
class SmConfigParser(configparser.ConfigParser):

  def as_dict(self):
    d = dict(self._sections)
    for k in d:
      d[k] = dict(self._defaults, **d[k])
      d[k].pop('__name__', None)
    return d
    
if __name__ == "__main__":

  record = {}
  # Get information on enabled repos regardless:
  # I gotta figure out how to mock the subprocess.check_output call
  repo_names = ospsurvey.probes.software.get_repo_list()
  repo_info = [ospsurvey.probes.software.get_repo_info(r) for r in repo_names]
  record['repos'] = {'yum': repo_info }

  record['packages'] = ospsurvey.probes.software.check_updates()
  record['cves'] = ospsurvey.probes.software.check_cves()

  # check if subscribed by subscription manager
  if ospsurvey.probes.software.sm_check():
  
    record['subscription-method'] = 'subscription-manager'
    sm_config = ospsurvey.probes.software.get_sm_config()
    record['config'] = sm_config
    sm_status = ospsurvey.probes.software.get_sm_status()
    record['status'] = sm_status
  
    if sm_status['status'] != 'Unsubscribed':
      sm_consumed = ospsurvey.probes.software.get_sm_consumed()
      sm_repos = ospsurvey.probes.software.get_sm_repos()

      record['consumed'] = sm_consumed
      record['repos']['sm'] = sm_repos
          
  elif ospsurvey.probes.software.rhn_check():
    record['subscription-method'] = 'rhn'
    rhn_config = ospsurvey.probes.software.get_rhn_config()
    record['config'] = rhn_config
    #rhn_status = get_rhn_status()

  else:
    print(json.dumps({'subscription-method': 'none'}))
    sys.exit(1)
    
    
  print(json.dumps(record))
  sys.exit(0)
